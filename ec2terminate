#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import operator
import re
import boto.ec2
import time
import subprocess
import traceback
import sys
from time import strftime
import time
start_time = time.time()


parser = argparse.ArgumentParser(description="Terminate a ec2 instance.", prog="ec2terminate")
parser.add_argument("instance", help="The AWS instance id.")
parser.add_argument("-b", "--both", help="Terminate both private and public dns.", dest='both', default=False, action='store_true')
parser.add_argument("-r", "--region", help="The AWS region to target.", dest='region', default='us-west-2')
parser.add_argument("-k", "--key", help="Your amazon access key.", dest='aws_access_key')
parser.add_argument("-sk", "--secret", help="Your amazon secret key.", dest='aws_secret_key')
parser.add_argument("-l", "--log", help="Sets the log level. Defaults to INFO.", default='INFO')

def format_exception(e):
  exception_list = traceback.format_stack()
  exception_list = exception_list[:-2]
  exception_list.extend(traceback.format_tb(sys.exc_info()[2]))
  exception_list.extend(traceback.format_exception_only(sys.exc_info()[0], sys.exc_info()[1]))
  exception_str = "Traceback (most recent call last):\n"
  exception_str += "".join(exception_list)
  exception_str = exception_str[:-1]
  return exception_str

def execute(command):
  process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  while True:
      nextline = process.stdout.readline()
      if nextline == '' and process.poll() != None:
          break
      sys.stdout.write(nextline)
      sys.stdout.flush()

  output = process.communicate()[0]
  returncode = process.returncode

  if (returncode == 0):
      return output
  else:
    raise Exception("%s %s %s" % (command, returncode, output))

def main(instance, both, region, aws_access_key, aws_secret_key, log):
    global aws_key
    aws_key = aws_access_key

    global aws_secret
    aws_secret = aws_secret_key

    global aws_region
    aws_region = region

    try:
      conn = boto.ec2.connect_to_region(aws_region, aws_access_key_id=aws_key, aws_secret_access_key=aws_secret)
      reservations = conn.get_all_reservations()
      for r in reservations:
        for s in r.instances:
          if s.id == instance:
            logger.info("Waiting for dns to synchronize...")
            if both == True:
              r53a2 = "r53a -l %s -d -k %s -sk '%s' -r %s -i %s %s" % (log, aws_key, aws_secret, aws_region, s.private_ip_address, s.tags['Name'])
              logger.debug(r53a2)
              execute(r53a2)
            r53a = "r53a -l %s -d -k %s -sk '%s' -r %s -i %s -v %s %s" % (log, aws_key, aws_secret, aws_region, s.private_ip_address, s.vpc_id, s.tags['Name'])
            logger.debug(r53a)
            execute(r53a)
            status = s.update()
            conn.terminate_instances(instance_ids=[s.id])
            while status != 'terminated':
              status = s.update()
              logger.info("%s %s %s" % (s.tags['Name'], s.id, status))
              time.sleep(30)
            logger.info("completed in %s seconds" % (time.time() - start_time))
            break
    except KeyboardInterrupt:
      logger.warning("User terminated")
    except Exception, e:
      logger.error(format_exception(e))

if __name__ == "__main__":
  args = parser.parse_args()

  logger = logging.getLogger()
  exec("logger.setLevel(logging." + args.log.upper() + ")")

  handler = logging.StreamHandler()
  exec("handler.setLevel(logging." + args.log.upper() + ")")
  formatter = logging.Formatter("[%(asctime)s] %(levelname)s: ec2terminate %(message)s","%Y-%m-%d %H:%M:%S")
  handler.setFormatter(formatter)
  logger.addHandler(handler)

  arg_dict = vars(args)
  logging.debug("CLI args: %s" % args)
  main(**arg_dict)
