#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import operator
import re
import boto.ec2
import time
import boto.route53
import traceback
import sys
from time import strftime
import time
start_time = time.time()

parser = argparse.ArgumentParser(description="Manage an AWS Route53 A record.", prog="r53a")
parser.add_argument("hostname", help="The hostname to perform the action on.")
parser.add_argument("-d", help="Delete the record instead of adding it.", dest='delete', action='store_true')
parser.add_argument("-i", "--ip", help="The ipaddress to perform the action against.", dest='ipaddress', required=True)
parser.add_argument("-r", "--region", help="The AWS region to target.", dest='region', required=True)
parser.add_argument("-v", "--vpc", help="The AWS VPC id to use if you are targeting a private zone.", dest='vpc_id')
parser.add_argument("-k", "--key", help="Your amazon access key.", dest='aws_access_key', required=True)
parser.add_argument("-sk", "--secret", help="Your amazon secret key.", dest='aws_secret_key', required=True)
parser.add_argument("-l", "--log", help="Sets the log level. Defaults to INFO.", default='INFO')

def format_exception(e):
  exception_list = traceback.format_stack()
  exception_list = exception_list[:-2]
  exception_list.extend(traceback.format_tb(sys.exc_info()[2]))
  exception_list.extend(traceback.format_exception_only(sys.exc_info()[0], sys.exc_info()[1]))
  exception_str = "Traceback (most recent call last):\n"
  exception_str += "".join(exception_list)
  exception_str = exception_str[:-1]
  return exception_str

def get_private_zone(conn, name):
  for zone in conn.get_zones():
    if zone.name == name:
      if conn.get_hosted_zone(zone.id)['GetHostedZoneResponse']['HostedZone']['Config']['PrivateZone'] == 'true':
        return zone
def get_public_zone(conn, name):
  for zone in conn.get_zones():
    if zone.name == name:
      if conn.get_hosted_zone(zone.id)['GetHostedZoneResponse']['HostedZone']['Config']['PrivateZone'] == 'false':
        return zone

def main(hostname, delete, vpc_id, ipaddress, region, aws_access_key, aws_secret_key, log):
    global aws_key
    aws_key = aws_access_key

    global aws_secret
    aws_secret = aws_secret_key

    global aws_region
    aws_region = region

    try:
      route53 = boto.route53.connect_to_region(aws_region, aws_access_key_id=aws_key, aws_secret_access_key=aws_secret)
      all_hosted_zones = route53.get_all_hosted_zones()
      zones = all_hosted_zones['ListHostedZonesResponse']['HostedZones']
      for zone in zones:
        private = 'private' if zone['Config']['PrivateZone'] == 'false' else 'public'
        if private == 'private':
          match = re.search(zone['Name'][:-1], hostname)
          if match:
            if str(vpc_id) != 'None':
              z = get_private_zone(route53, zone['Name'])
            else:
              z = get_public_zone(route53, zone['Name'])
            if delete == True:
              status = z.delete_a(hostname)
              while status.update() != 'INSYNC':
                logger.info("%s %s %s %s" % (hostname, z.name, z.id, status))
                time.sleep(30)
              logger.info("%s %s %s %s" % (hostname, z.name, z.id, status))
            if delete == False:
              status = z.add_a(hostname, ipaddress)
              while status.update() != 'INSYNC':
                logger.info("%s %s %s %s" % (hostname, z.name, z.id, status))
                time.sleep(30)
              logger.info("%s %s %s %s" % (hostname, z.name, z.id, status))
            logger.info("completed in %s seconds" % (time.time() - start_time))

    except KeyboardInterrupt:
      logger.warning("User terminated")
    except Exception, e:
      logger.error(format_exception(e))

if __name__ == "__main__":
  args = parser.parse_args()

  logger = logging.getLogger()
  exec("logger.setLevel(logging." + args.log.upper() + ")")

  handler = logging.StreamHandler()
  exec("handler.setLevel(logging." + args.log.upper() + ")")
  formatter = logging.Formatter("[%(asctime)s] %(levelname)s: r53a %(message)s","%Y-%m-%d %H:%M:%S")
  handler.setFormatter(formatter)
  logger.addHandler(handler)

  arg_dict = vars(args)
  logging.debug("CLI args: %s" % args)
  main(**arg_dict)
