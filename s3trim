#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import operator
import re
from boto.s3.connection import S3Connection

parser = argparse.ArgumentParser(description="Get the key for the latest S3 Object matching a prefix.", prog="s3trim")
parser.add_argument("bucket", help="S3 bucket.")
parser.add_argument("prefix", help="S3 Object key prefix.")
parser.add_argument("-c", "--count", help="Number of files to leave.", dest='aws_bucket_count')
parser.add_argument("-k", "--key", help="Your amazon access key.", dest='aws_access_key')
parser.add_argument("-sk", "--secret", help="Your amazon secret key.", dest='aws_secret_key')
parser.add_argument("-l", "--log", help="Sets the log level. Defaults to INFO.", default='INFO')

def main(bucket, prefix, aws_access_key='', aws_secret_key='', log='info', aws_bucket_count=5):
    global aws_key
    aws_key = aws_access_key

    global aws_secret
    aws_secret = aws_secret_key

    s3 = S3Connection(aws_key, aws_secret)
    bucket = s3.get_bucket(bucket)
    bucket_list = bucket.list(prefix)
    structured_list = {}

    pattern = '\d+'
    results = {}
    try:
      for item in bucket_list:
        match = re.search(pattern, item.name)
        s = match.start()
        e = match.end()
        results[item.name[s:e]] = item
      sorted_results = sorted(results.items(), key=operator.itemgetter(1))
      removal_count = len(sorted_results) - int(aws_bucket_count)
      for _ in range(removal_count):
        bucket.delete_key(sorted_results[_][1])
        logger.info("removed %s" % (sorted_results[_][1]))
    except KeyboardInterrupt:
      logger.warning("User terminated")
    except Exception, err:
      logger.error(err)

if __name__ == "__main__":
  args = parser.parse_args()

  logger = logging.getLogger()
  exec("logger.setLevel(logging." + args.log.upper() + ")")

  handler = logging.StreamHandler()
  exec("handler.setLevel(logging." + args.log.upper() + ")")
  formatter = logging.Formatter("%(levelname)s - %(message)s")
  handler.setFormatter(formatter)
  logger.addHandler(handler)

  arg_dict = vars(args)
  logging.debug("CLI args: %s" % args)
  main(**arg_dict)
